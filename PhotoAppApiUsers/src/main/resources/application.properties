server.port=${PORT:0}
spring.application.name=users-ws

#Eureka Client Configuration
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${eureka.instance.instance_id:${random.value}}

#Actuator configuration
management.endpoints.web.exposure.include=*
management.endpoint.shutdown.enabled=true

#Customise /info actuator end point
info.app.name=User MicroService Application
info.app.description=This micro service is used to manage user details 
info.app.version=0.0.1-SNAPSHOT


#Database common Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#H2 Database Web Configuration
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

#MYSQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/photoappdb?createDatabaseIfNotExist=true&useSSL=false&useUnicode=yes&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#JWT Configuration
#20 minutes = 20 * 60 * 1000
jwt.token.expirationTime=1200000
jwt.token.secret=dsbfj@2224d886!kh!jhjh@bjhg!jhj$h
login.url.path=/users/login

#RabbitMQ configuration which uses AMQP(Advance Messaging Queuing Protocol) protocol to push message properties
# to all micro services
spring.rabbitmq.hostname= localhost
spring.rabbitmq.port= 5672
spring.rabbitmq.username= admin
spring.rabbitmq.password= admin

#Rest call to albums-ws service to get all albums associated to a user. Just replace %s with valid userId. This requires @LoadBalanced over RestTemplate Bean
albums.get.api.url=http://ALBUMS-WS/users/%s/albums